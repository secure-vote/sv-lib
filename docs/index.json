[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/ballotBox.ts",
    "content": "import { ProxyVote } from './types'\n\nimport * as R from 'ramda'\nimport BN from 'bn.js'\nimport * as assert from 'assert'\nimport * as web3Utils from 'web3-utils'\nimport * as svCrypto from './crypto'\n\n/**\n * This object tracks the flags used for SV ballot boxes. They determine the submission\n * methods and whether ballots are tracked as binding, official, or testing.\n *\n * For more info see docs.secure.vote\n */\nexport const flags = {\n  // flags on submission methods\n  USE_ETH: 2 ** 0,\n  USE_SIGNED: 2 ** 1,\n  USE_NO_ENC: 2 ** 2,\n  USE_ENC: 2 ** 3,\n\n  // other ballot settings\n  IS_BINDING: 2 ** 13,\n  IS_OFFICIAL: 2 ** 14,\n  USE_TESTING: 2 ** 15\n}\n\n/**\n * Creates a packed copy of start and end times with submissionBits\n *\n * @param {number} start\n *  Start time in seconds since epoch\n * @param {number} end\n *  End time in seconds since epoch\n * @param {number} submissionBits\n *  Submission bits - can be created using mkSubmissionBits\n * @returns {BN}\n *  Returns a `bn.js` BigNum of the packed values.\n *  Format: [submissionBits(16)][startTime(64)][endTime(64)]\n */\nexport const mkPacked = (start, end, submissionBits) => {\n  const s = new BN(start)\n  const e = new BN(end)\n  const sb = new BN(submissionBits)\n  return sb\n    .shln(64)\n    .add(s)\n    .shln(64)\n    .add(e)\n}\n\n/**\n * This combines flags into a finished submissionBits. It also does some validation.\n * @param {*} toCombine\n *  Array of all submission flags to combine. See SV.ballotBox.flags for flag options.\n *  All flags must be a power of 2 (which indicates they occupy a single bit in the number when combining).\n * @returns {number}\n *  A 16 bit integer of combined flags.\n */\nexport const mkSubmissionBits = (...toCombine) => {\n  if (Array.isArray(toCombine[0]) && typeof toCombine[0][0] == 'number') {\n    console.warn(\n      'Warning: mkSubmissionBits does not take an Array<number> anymore.'\n    )\n    toCombine = toCombine[0]\n  }\n\n  const toRet = R.reduce((acc, i) => acc | i, 0, toCombine)\n  assert.equal(\n    R.all(i => typeof i == 'number', toCombine),\n    true,\n    `Bad input to mkSubmissionBits. Input is required to be an array of numbers. Instead got: ${toCombine}`\n  )\n  assert.equal(\n    R.all(i => i === (i | 0), toCombine),\n    true,\n    `Bad input to mkSubmissionBits. Input was not an array of integers. Instead got: ${toCombine}`\n  )\n  assert.equal(\n    toRet,\n    R.sum(toCombine),\n    `Bad input provided to mkSubmissionBits. Logical OR and sum sanity check failed. Input was: ${toCombine}`\n  )\n  assert.equal(\n    toRet < 2 ** 16,\n    true,\n    `Submission bits must fit into a 16 bit integer (i.e. less than 2^16). Result was: ${toRet}`\n  )\n  return toRet\n}\n\n/**\n * Take the arguments and produce web3 data fitting the `submitProxyVote` method.\n * @param {string} ballotId\n *  a BN.js or Hex ballotId\n * @param {number} sequence\n *  the sequence number to use (0 < sequence < 2^32)\n * @param {string} voteData\n *  the vote data to use, should be 32 bytes hex encoded\n * @param {string} extra\n *  any extra data included with the vote (such as curve25519 pubkeys)\n * @param {string} privateKey\n *  the privkey used to sign\n * @param {object?} opts\n *  options:\n *   - skipSequenceSizeCheck: boolean (will not throw if sequence is >= 2^32)\n * @returns {object}\n *  { proxyReq (bytes32[5]), extra (bytes) } in the required format for `submitProxyVote`\n */\nexport const mkSignedBallotForProxy = (\n  ballotId,\n  sequence,\n  voteData,\n  extra,\n  privateKey,\n  opts: any = {}\n): ProxyVote => {\n  if (opts.skipSequenceSizeCheck !== true)\n    assert.equal(\n      0 < sequence && sequence < 2 ** 32,\n      true,\n      'sequence number out of bounds'\n    )\n  assert.equal(\n    web3Utils.isHexStrict(ballotId) || web3Utils.isBN(ballotId),\n    true,\n    'ballotId incorrect format (either not a BN or not hex)'\n  )\n  assert.equal(\n    web3Utils.isHexStrict(voteData),\n    true,\n    'vote data is not hex (strict)'\n  )\n  assert.equal(\n    web3Utils.isHexStrict(extra),\n    true,\n    'extra param is not hex (strict)'\n  )\n\n  const _ballotId = web3Utils.isBN(ballotId)\n    ? web3Utils.padLeft(web3Utils.toHex(ballotId), 64)\n    : ballotId\n\n  assert.equal(_ballotId.length, 66, 'ballotId incorrect length')\n  assert.equal(voteData.length, 66, 'voteData incorrect length')\n\n  const sequenceHex = web3Utils.padLeft(web3Utils.toHex(sequence), 8)\n\n  const messageHash = web3Utils.soliditySha3(\n    { t: 'bytes31', v: web3Utils.padLeft(sequenceHex, '62') },\n    { t: 'bytes32', v: _ballotId },\n    { t: 'bytes32', v: voteData },\n    { t: 'bytes', v: extra }\n  )\n\n  const { v, r, s } = svCrypto.ethSignHash(messageHash, privateKey)\n\n  const vBytes = web3Utils.hexToBytes(v)\n  const midBytes = web3Utils.hexToBytes(web3Utils.padRight('0x', 54))\n  const sequenceBytes = web3Utils.hexToBytes(sequenceHex)\n  const packed2Bytes = R.concat(vBytes, R.concat(midBytes, sequenceBytes))\n  const packed2 = web3Utils.bytesToHex(packed2Bytes)\n\n  return {\n    proxyReq: [r, s, packed2, _ballotId, voteData],\n    extra\n  }\n}\n\n/**\n * Verify a signed vote to be submitted via proxy as generated by `mkSignedBallotForProxy`\n *\n * @param {ProxyVote} proxyVote The ProxyVote object\n * @param {*} [opts={}] Not used currently; for future options\n * @returns {{verified: bool, address: EthAddress}}\n */\nexport const verifySignedBallotForProxy = (\n  proxyVote: ProxyVote,\n  opts: any = {}\n) => {\n  const {\n    proxyReq: [r, s, packed2, ballotId, voteData],\n    extra\n  } = proxyVote\n\n  const p2Bytes = web3Utils.hexToBytes(packed2)\n  const v = web3Utils.bytesToHex(p2Bytes.slice(0, 1))\n  const seqNum = web3Utils.bytesToHex(p2Bytes.slice(27, 32))\n\n  const messageHash = web3Utils.soliditySha3(\n    { t: 'bytes31', v: web3Utils.bytesToHex(p2Bytes.slice(1)) },\n    { t: 'bytes32', v: ballotId },\n    { t: 'bytes32', v: voteData },\n    { t: 'bytes', v: extra }\n  )\n\n  return svCrypto.ethVerifySig(messageHash, [v, r, s])\n}\n\n/**\n * Prepares voteData for a Range3 ballot from an array of votes\n *\n * @param {array} votesArray\n *  Takes an array of numbers which represent the votes to be transformed\n *  Format: [1, 2, -1]\n *\n * @returns {string}\n *  Returns an eth hex string of the vote data\n */\nexport const genRange3VoteData = (votesArray: number[]) => {\n  assert.equal(\n    R.all(v => (v | 0) === v, votesArray),\n    true,\n    'All array elements must be defined and integers.'\n  )\n  assert.equal(\n    R.all(v => -3 <= v && v <= 3, votesArray),\n    true,\n    'Votes must be in range -3 to 3.'\n  )\n  assert.equal(\n    votesArray.length <= 85,\n    true,\n    'Too many votes; maximum capacity of 32 bytes is 85 individual items.'\n  )\n\n  // Generate list of binary encoded votes. Read bottom to top.\n  const binaryVotes = R.compose(\n    // pad to 3 bits\n    R.map((vBin: string) => R.join('', R.repeat('0', 3 - vBin.length)) + vBin),\n    // convert votes to binary\n    R.map((v: number) => v.toString(2)),\n    // offset votes to be in range 0,6\n    R.map((v: number) => v + 3)\n  )(votesArray)\n\n  // check we have converted votes to bitstring representation of length 3\n  assert.equal(\n    R.all(bVote => bVote.length == 3, binaryVotes),\n    true,\n    'Assertion failed: all binary-encoded votes should be 3 bits long'\n  )\n\n  // create the binary voteData\n  const rawBinVotes = R.join('', binaryVotes)\n  // and pad it with 0s to length 256 (32 bytes total)\n  const binVoteData =\n    rawBinVotes + R.join('', R.repeat('0', 32 * 8 - rawBinVotes.length))\n  assert.equal(\n    binVoteData.length,\n    256,\n    'Assertion failed: generated voteData bit string does not have length 256'\n  )\n  // Convert to bytes\n  const voteBytes = R.map(\n    bStr => parseInt(bStr, 2),\n    R.splitEvery(8, binVoteData)\n  )\n\n  // check bytes are in range\n  assert.equal(\n    R.all(vByte => 0 <= vByte && vByte <= 255, voteBytes),\n    true,\n    'Assertion failed: voteBytes (byte array) had a byte out of bounds (<0 or >255)'\n  )\n\n  // generate final hex\n  const voteData = web3Utils.bytesToHex(voteBytes)\n  assert.equal(\n    voteData.length,\n    66,\n    'Assertion failed: final hex was not 66 characters long (32 bytes)'\n  )\n\n  return voteData\n}\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/ballotBox.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "flags",
    "memberof": "src/ballotBox.ts",
    "static": true,
    "longname": "src/ballotBox.ts~flags",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/ballotBox.ts",
    "importStyle": "{flags}",
    "description": "This object tracks the flags used for SV ballot boxes. They determine the submission\nmethods and whether ballots are tracked as binding, official, or testing.\n\nFor more info see docs.secure.vote",
    "lineNumber": 12,
    "type": {
      "types": [
        "{\"USE_ETH\": *, \"USE_SIGNED\": *, \"USE_NO_ENC\": *, \"USE_ENC\": *, \"IS_BINDING\": *, \"IS_OFFICIAL\": *, \"USE_TESTING\": *}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "mkPacked",
    "memberof": "src/ballotBox.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ballotBox.ts~mkPacked",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/ballotBox.ts",
    "importStyle": "{mkPacked}",
    "description": "Creates a packed copy of start and end times with submissionBits",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BN}\n Returns a `bn.js` BigNum of the packed values.\n Format: [submissionBits(16)][startTime(64)][endTime(64)]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start time in seconds since epoch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "End time in seconds since epoch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "submissionBits",
        "description": "Submission bits - can be created using mkSubmissionBits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BN"
      ],
      "spread": false,
      "description": "Returns a `bn.js` BigNum of the packed values.\n Format: [submissionBits(16)][startTime(64)][endTime(64)]"
    }
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "mkSubmissionBits",
    "memberof": "src/ballotBox.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ballotBox.ts~mkSubmissionBits",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/ballotBox.ts",
    "importStyle": "{mkSubmissionBits}",
    "description": "This combines flags into a finished submissionBits. It also does some validation.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}\n A 16 bit integer of combined flags."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "toCombine",
        "description": "Array of all submission flags to combine. See SV.ballotBox.flags for flag options.\n All flags must be a power of 2 (which indicates they occupy a single bit in the number when combining)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A 16 bit integer of combined flags."
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "mkSignedBallotForProxy",
    "memberof": "src/ballotBox.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ballotBox.ts~mkSignedBallotForProxy",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/ballotBox.ts",
    "importStyle": "{mkSignedBallotForProxy}",
    "description": "Take the arguments and produce web3 data fitting the `submitProxyVote` method.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}\n { proxyReq (bytes32[5]), extra (bytes) } in the required format for `submitProxyVote`"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ballotId",
        "description": "a BN.js or Hex ballotId"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sequence",
        "description": "the sequence number to use (0 < sequence < 2^32)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "voteData",
        "description": "the vote data to use, should be 32 bytes hex encoded"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extra",
        "description": "any extra data included with the vote (such as curve25519 pubkeys)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": "the privkey used to sign"
      },
      {
        "nullable": null,
        "types": [
          "object?"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "options:\n  - skipSequenceSizeCheck: boolean (will not throw if sequence is >= 2^32)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "{ proxyReq (bytes32[5]), extra (bytes) } in the required format for `submitProxyVote`"
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "verifySignedBallotForProxy",
    "memberof": "src/ballotBox.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ballotBox.ts~verifySignedBallotForProxy",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/ballotBox.ts",
    "importStyle": "{verifySignedBallotForProxy}",
    "description": "Verify a signed vote to be submitted via proxy as generated by `mkSignedBallotForProxy`",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{verified: bool, address: EthAddress}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ProxyVote"
        ],
        "spread": false,
        "optional": false,
        "name": "proxyVote",
        "description": "The ProxyVote object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "opts",
        "description": "Not used currently; for future options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{verified: bool, address: EthAddress}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "genRange3VoteData",
    "memberof": "src/ballotBox.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ballotBox.ts~genRange3VoteData",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/ballotBox.ts",
    "importStyle": "{genRange3VoteData}",
    "description": "Prepares voteData for a Range3 ballot from an array of votes",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}\n Returns an eth hex string of the vote data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "votesArray",
        "description": "Takes an array of numbers which represent the votes to be transformed\n Format: [1, 2, -1]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Returns an eth hex string of the vote data"
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/const.ts",
    "content": "export const zeroAddr = \"0x0000000000000000000000000000000000000000\";\nexport const zeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\ntype EthNetConf = {\n    indexContractName: string\n    auxContract: string\n    httpProvider: string\n    delegationContractName: string\n    ensResolver: string\n    ens: string\n    etherscanLink: string\n    name: string\n    archiveUrl: string\n    archivePushUrl: string\n    lookupAddress: string\n}\n\nconst _raw_networkVars: {[netName: string]: EthNetConf} = {\n    kovan: {\n        indexContractName: \"index.kov.sv\",\n        auxContract: \"0x0d31706febd1b8177c722fe39432f3e47143ccd9\",\n        httpProvider: \"https://kovan.eth.secure.vote/tokenvote-dev\",\n        delegationContractName: \"delegation-2018-06-19.kov.sv\",\n        ensResolver: \"0xc8c73829348cb15da4b0785a110017464fb8af51\",\n        ens: \"0xd6F4f22eeC158c434b17d01f62f5dF33b108Ae93\",\n        etherscanLink: \"https://kovan.etherscan.io/\",\n        name: \"Kovan\",\n        archiveUrl: \"https://archive.test.secure.vote/\",\n        archivePushUrl: \"https://archive.test.push.secure.vote/\",\n        lookupAddress: \"0x216265865e46D4c6FE506877EfAAE7dd7Ae2faCE\"\n    },\n    mainnet: {\n        indexContractName: \"index.tokenvote.eth\",\n        auxContract: \"0xff553fe4183f27e2165299b3fc0ae8c3b5c07084\",\n        httpProvider: \"https://mainnet.eth.secure.vote/tokenvote\",\n        delegationContractName: \"delegate.secvote.eth\",\n        ensResolver: \"0x5FfC014343cd971B7eb70732021E26C35B744cc4\",\n        ens: \"0x314159265dd8dbb310642f98f50c066173c1259b\",\n        etherscanLink: \"https://etherscan.io/\",\n        name: \"Mainnet\",\n        archiveUrl: \"https://archive.secure.vote/\",\n        archivePushUrl: \"https://archive.push.secure.vote/\",\n        lookupAddress: \"0x216265865e46D4c6FE506877EfAAE7dd7Ae2faCE\"\n    },\n    ropsten: {\n        indexContractName: \"\",\n        auxContract: \"\",\n        httpProvider: \"https://ropsten.eth.secure.vote/tokenvote-dev\",\n        delegationContractName: \"\",\n        ensResolver: \"\",\n        ens: \"\",\n        etherscanLink: \"https://ropsten.etherscan.io/\",\n        name: \"Ropsten\",\n        archiveUrl: \"https://archive.test.secure.vote/\",\n        archivePushUrl: \"https://archive.test.push.secure.vote/\",\n        lookupAddress: \"\"\n    },\n    classic: {\n        indexContractName: \"\",\n        auxContract: \"\",\n        httpProvider: \"https://classic.eth.secure.vote/tokenvote-dev\",\n        delegationContractName: \"\",\n        ensResolver: \"\",\n        ens: \"\",\n        etherscanLink: \"https://gastracker.io/\",  // eth classic block explorer\n        name: \"Classic\",\n        archiveUrl: \"https://archive.secure.vote/\",\n        archivePushUrl: \"https://archive.push.secure.vote/\",\n        lookupAddress: \"\"\n    },\n};\n\nexport const networkVars = new Proxy(_raw_networkVars, {\n    get: (obj, prop: string) => {\n        console.warn(\"Warning: const.networkVars is deprecated; please use const.getNetwork(..)\");\n        return obj[prop];\n    }\n});\n\nexport const networkName = networkId => {\n    console.warn(\"Warning: const.networkName(..) is deprecated. Please use const.getNetwork(..).name\");\n\n    switch (networkId) {\n        case 1:\n            return \"Mainnet\";\n        case 2:\n            return \"Morden\";\n        case 3:\n            return \"Ropsten\";\n        case 4:\n            return \"Rinkeby\";\n        case 42:\n            return \"Kovan\";\n        default:\n            return \"Unknown\";\n    }\n};\n\nexport const getNetwork = (networkId: number, chainId: number): EthNetConf => {\n    switch (networkId) {\n        case 1:\n            if (chainId === 1) return _raw_networkVars.mainnet\n            if (chainId === 61) return _raw_networkVars.classic\n            break;\n        case 3:\n            return _raw_networkVars.ropsten\n        case 42:\n            return _raw_networkVars.kovan\n        default:\n            break;\n    }\n    throw Error(`Cannot find network with net_id ${networkId} and chainId ${chainId}`)\n}\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/const.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "zeroAddr",
    "memberof": "src/const.ts",
    "static": true,
    "longname": "src/const.ts~zeroAddr",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/const.ts",
    "importStyle": "{zeroAddr}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "zeroHash",
    "memberof": "src/const.ts",
    "static": true,
    "longname": "src/const.ts~zeroHash",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/const.ts",
    "importStyle": "{zeroHash}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "_raw_networkVars",
    "memberof": "src/const.ts",
    "static": true,
    "longname": "src/const.ts~_raw_networkVars",
    "access": "private",
    "export": false,
    "importPath": "sv-lib/src/const.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"kovan\": *, \"mainnet\": *, \"ropsten\": *, \"classic\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "networkVars",
    "memberof": "src/const.ts",
    "static": true,
    "longname": "src/const.ts~networkVars",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/const.ts",
    "importStyle": "{networkVars}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "networkName",
    "memberof": "src/const.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/const.ts~networkName",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/const.ts",
    "importStyle": "{networkName}",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "networkId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "getNetwork",
    "memberof": "src/const.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/const.ts~getNetwork",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/const.ts",
    "importStyle": "{getNetwork}",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "networkId",
        "types": [
          "*"
        ]
      },
      {
        "name": "chainId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/crypto.ts",
    "content": "import * as Account from 'eth-lib/lib/account'\nimport * as Hash from 'eth-lib/lib/hash'\nimport * as web3Utils from 'web3-utils'\n\n/**\n * Like web3.eth.accounts.hashMessage without the envelope.\n *\n * @param {*} data\n *  A message to hash - if it is hex it'll be UTF8 decoded.\n *\n * @returns {*}\n *  The hashed message (using keccak256)\n */\nexport const hashMsgRaw = (data: string | number[]): string => {\n  const msg = web3Utils.isHexStrict(data) ? web3Utils.hexToBytes(data) : data\n  const msgBuffer = Buffer.from(msg)\n  return Hash.keccak256s(msgBuffer)\n}\n\n/**\n * Sign a message such that it can be verified with `ecrecover`.\n * Similar to `web3.eth.accounts.sign` except that we sign the hash directly.\n *\n * @param {*} messageHash\n *  Hash of a message, as returned by `web3.utils.soliditySha3` or similar.\n * @param {*} privateKey\n *  Privkey to sign with.\n *\n * @returns {{messageHash: string, r: string, s: string, v: string}}\n */\nexport const ethSignHash = (messageHash: string, privateKey: string) => {\n  // near identical to web3-eth-accounts (web3 v1)\n  // the main difference is we don't envelop the data.\n  const signature = Account.sign(messageHash, privateKey)\n  const vrs = Account.decodeSignature(signature)\n  return {\n    messageHash,\n    v: vrs[0],\n    r: vrs[1],\n    s: vrs[2],\n    signature\n  }\n}\n\nexport /**\n *\n * Operates `ecrecover` over the provided signature\n *\n * @param {string} messageHash This should be an Ethereum HexString\n * @param {string[]} [v, r, s] Components for the secp256k1 signature\n * @returns {{verified: bool, address: EthAddress}}\n */\nconst ethVerifySig = (messageHash: string, [v, r, s]: string[]) => {\n  const address = Account.recover(\n    messageHash,\n    Account.encodeSignature([v, r, s])\n  )\n  return {\n    verified: true,\n    address\n  }\n}\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/crypto.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "hashMsgRaw",
    "memberof": "src/crypto.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.ts~hashMsgRaw",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/crypto.ts",
    "importStyle": "{hashMsgRaw}",
    "description": "Like web3.eth.accounts.hashMessage without the envelope.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}\n The hashed message (using keccak256)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A message to hash - if it is hex it'll be UTF8 decoded."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The hashed message (using keccak256)"
    }
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "ethSignHash",
    "memberof": "src/crypto.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.ts~ethSignHash",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/crypto.ts",
    "importStyle": "{ethSignHash}",
    "description": "Sign a message such that it can be verified with `ecrecover`.\nSimilar to `web3.eth.accounts.sign` except that we sign the hash directly.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{messageHash: string, r: string, s: string, v: string}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "messageHash",
        "description": "Hash of a message, as returned by `web3.utils.soliditySha3` or similar."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "privateKey",
        "description": "Privkey to sign with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{messageHash: string, r: string, s: string, v: string}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "ethVerifySig",
    "memberof": "src/crypto.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/crypto.ts~ethVerifySig",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/crypto.ts",
    "importStyle": "{ethVerifySig}",
    "description": "\nOperates `ecrecover` over the provided signature",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{verified: bool, address: EthAddress}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "messageHash",
        "description": "This should be an Ethereum HexString"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "v, r, s",
        "description": "Components for the secp256k1 signature"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{verified: bool, address: EthAddress}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/index.ts",
    "content": "import * as ballotBox from './ballotBox'\nimport * as _const from './const'\nimport * as crypto from './crypto'\nimport * as light from './light'\nimport * as utils from './utils.js'\n\nexport default { ballotBox, crypto, light, utils, const: _const }\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/light.ts",
    "content": "import NH from 'eth-ens-namehash'\nimport axios from 'axios'\nimport * as bs58 from 'bs58'\nimport sha256 from 'sha256'\n\n// Lovely ABIs\nimport * as ResolverAbi from './smart_contracts/SV_ENS_Resolver.abi.json'\nimport * as IndexAbi from './smart_contracts/SVLightIndex.abi.json'\nimport * as BackendAbi from './smart_contracts/SVLightIndexBackend.abi.json'\nimport * as BBFarmAbi from './smart_contracts/BBFarm.abi.json'\nimport * as PaymentsAbi from './smart_contracts/SVPayments.abi.json'\nimport * as AuxAbi from './smart_contracts/AuxAbi.abi.json'\nimport * as AuctionAbi from './smart_contracts/CommAuctionIface.abi.json'\n// import * as ERC20Abi from './smart_contracts/ERC20.abi.json'\n\nexport const initializeSvLight = async svConfig => {\n  const { indexContractName, ensResolver, httpProvider, auxContract } = svConfig\n\n  const Web3 = require('web3')\n  const web3 = new Web3(new Web3.providers.HttpProvider(httpProvider))\n\n  const resolver = new web3.eth.Contract(ResolverAbi, ensResolver)\n\n  // const indexAddress =\n  // console.log('indexAddress :', indexAddress);\n  const index = new web3.eth.Contract(\n    IndexAbi,\n    await resolveEnsAddress({ resolver }, indexContractName)\n  )\n  const backendAddress = await getBackendAddress({ index })\n  const backend = new web3.eth.Contract(BackendAbi, backendAddress)\n  const aux = new web3.eth.Contract(AuxAbi, auxContract)\n  const payments = new web3.eth.Contract(\n    PaymentsAbi,\n    await index.methods.getPayments().call()\n  )\n\n  return {\n    svConfig,\n    web3,\n    resolver,\n    index,\n    backend,\n    aux,\n    payments\n  }\n}\n\nexport const resolveEnsAddress = async ({ resolver }, ensName) => {\n  return await resolver.methods.addr(NH.hash(ensName)).call()\n}\n\nexport const getBackendAddress = async ({ index }) => {\n  return await index.methods.getBackend().call()\n}\n\nexport const getDemocInfo = async ({ backend, democHash }) => {\n  return await backend.methods.getDInfo(democHash).call()\n}\n\nexport const getDemocNthBallot = async ({ svNetwork }, democBallotInfo) => {\n  // Destructure and set the variables that are needed\n  const { index, backend, aux, svConfig } = svNetwork\n  const { democHash, nthBallot } = democBallotInfo\n  const indexAddress = index._address\n  const backendAddress = backend._address\n  const archiveUrl = { svConfig }\n\n  const bbFarmAndBallotId = await aux.methods\n    .getBBFarmAddressAndBallotId(\n      backendAddress,\n      indexAddress,\n      democHash,\n      nthBallot\n    )\n    .call()\n  // console.log('bbFarmAndBallotId :', bbFarmAndBallotId);\n\n  const { id, bbFarmAddress } = bbFarmAndBallotId\n  const userEthAddress = '0x0000000000000000000000000000000000000000'\n  const ethBallotDetails = await aux.methods\n    .getBallotDetails(id, bbFarmAddress, userEthAddress)\n    .call()\n\n  const ballotSpec = await getBallotSpec(archiveUrl, ethBallotDetails.specHash)\n  // console.log('ballotSpec :', ballotSpec);\n  // .then(x => console.log('Then called', x))\n  // .catch(x => console.log('Caught error', x));\n\n  const ballotObject = {\n    ...bbFarmAndBallotId,\n    ...ethBallotDetails,\n    data: { ...ballotSpec.data }\n  }\n\n  return ballotObject\n}\n\nexport const getBallotSpec = async (\n  archiveUrl,\n  ballotSpecHash\n): Promise<{ data: any }> => {\n  // TODO refactor to be a bit more elegant\n  return new Promise<{ data: any }>((res, rej) => {\n    let done = false\n    const doRes = obj => {\n      if (!done) {\n        done = true\n        res(obj)\n      }\n    }\n    getBallotObjectFromIpfs(ballotSpecHash).then(doRes)\n    setTimeout(() => {\n      if (!done) {\n        getBallotObjectFromS3(archiveUrl, ballotSpecHash)\n          .then(doRes)\n          .catch(rej)\n      }\n    }, 3500)\n  })\n}\n\nexport const getBallotObjectFromS3 = async (archiveUrl, ballotSpecHash) => {\n  return axios.get(archiveUrl + ballotSpecHash + '.json')\n}\n\nexport const getBallotObjectFromIpfs = async ballotSpecHash => {\n  const ipfsUrl = 'https://ipfs.infura.io/api/v0/block/get?arg='\n  const cidHex = '1220' + ballotSpecHash.substr(2)\n  const bytes = Buffer.from(cidHex, 'hex')\n  const cid = bs58.encode(bytes)\n  return await axios.get(ipfsUrl + cid)\n}\n\n// Take the svNetwork object and a democHash, will return all of the ballots from the democracy in an array\nexport const getDemocBallots = async ({ svNetwork, democHash }) => {\n  const { backend } = svNetwork\n  const democInfo = await getDemocInfo({ backend, democHash })\n\n  // Throw an error if the democ info is not correct\n  const { erc20, owner } = democInfo\n  if (owner === '0x0000000000000000000000000000000000000000') {\n    throw new Error('Democracy Hash does not resolve to a democracy')\n  }\n\n  // TODO - Work out where / how to push an errored ballot\n  // Loop through and get all the ballots\n  const numBallots = democInfo.nBallots\n  const ballotsArray = []\n  for (let i = 0; i < numBallots; i++) {\n    ballotsArray[i] = await getDemocNthBallot(\n      { svNetwork },\n      { democHash: democHash, nthBallot: i }\n    )\n  }\n\n  return ballotsArray\n}\n\n/** Takes in the svNetwork object and returns all relevant addresses */\nexport const getContractAddresses = async ({ svNetwork }) => {\n  const { index, resolver, backend, aux, svConfig } = svNetwork\n  const { delegationContractName, lookupAddress } = svConfig\n\n  return {\n    indexAddress: index._address,\n    backendAddress: backend._address,\n    auxAddress: aux._address,\n    lookupAddress: lookupAddress,\n    resolverAddress: resolver._address,\n    communityAuctionAddress: await index.methods.getCommAuction().call(),\n    delegationAddress: await resolveEnsAddress(\n      { resolver },\n      delegationContractName\n    ),\n    paymentsAddress: await index.methods.getPayments().call()\n  }\n}\n\nexport const weiToCents = async ({ payments }, wei) => {\n  return await payments.methods.weiToCents(wei).call()\n}\n\nexport const getCommunityBallotPrice = async ({ payments }, democHash) => {\n  return await payments.methods.getNextPrice(democHash).call()\n}\n\nexport const checkIfAddressIsEditor = async (\n  { svNetwork },\n  { userAddress, democHash }\n) => {\n  const { backend } = svNetwork\n  return await backend.methods.isDEditor(democHash, userAddress).call()\n}\n\n// Checks the current ethereum gas price and returns a couple of values\nexport const getCurrentGasPrice = async () => {\n  const gasStationInfo = await axios.get(\n    'https://ethgasstation.info/json/ethgasAPI.json'\n  )\n  const { data } = gasStationInfo\n\n  return {\n    safeLow: data.safeLow / 10,\n    average: data.average / 10,\n    fast: data.fast / 10,\n    fastest: data.fastest / 10\n  }\n}\n// Checks the ballot hash against the ballot content\nexport const checkBallotHashBSpec = (ballotSpec, assertSpecHash) => {\n  let contentHash = '0x' + sha256(JSON.stringify(ballotSpec, null, 2))\n  if (assertSpecHash === contentHash) {\n    return true\n  } else {\n    return false\n  }\n}\n\n// Checks the ballot hash against a ballot global ballot object\n// Does this by destructuring the specHash and data out of it\nexport const checkBallotHashGBallot = ballotObject => {\n  const { data, specHash } = ballotObject\n  return checkBallotHashBSpec(data, specHash)\n}\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/light.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "initializeSvLight",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~initializeSvLight",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{initializeSvLight}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "svConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"svConfig\": *, \"web3\": *, \"resolver\": *, \"index\": *, \"backend\": *, \"aux\": *, \"payments\": *}"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "resolveEnsAddress",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~resolveEnsAddress",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{resolveEnsAddress}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"resolver\": *}"
        ],
        "defaultRaw": {
          "resolver": null
        },
        "defaultValue": "{\"resolver\":null}"
      },
      {
        "name": "ensName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "getBackendAddress",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getBackendAddress",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getBackendAddress}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"index\": *}"
        ],
        "defaultRaw": {
          "index": null
        },
        "defaultValue": "{\"index\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "getDemocInfo",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getDemocInfo",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getDemocInfo}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"backend\": *, \"democHash\": *}"
        ],
        "defaultRaw": {
          "backend": null,
          "democHash": null
        },
        "defaultValue": "{\"backend\":null,\"democHash\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "getDemocNthBallot",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getDemocNthBallot",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getDemocNthBallot}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"svNetwork\": *}"
        ],
        "defaultRaw": {
          "svNetwork": null
        },
        "defaultValue": "{\"svNetwork\":null}"
      },
      {
        "name": "democBallotInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "getBallotSpec",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getBallotSpec",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getBallotSpec}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "archiveUrl",
        "types": [
          "*"
        ]
      },
      {
        "name": "ballotSpecHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "getBallotObjectFromS3",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getBallotObjectFromS3",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getBallotObjectFromS3}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "archiveUrl",
        "types": [
          "*"
        ]
      },
      {
        "name": "ballotSpecHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "getBallotObjectFromIpfs",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getBallotObjectFromIpfs",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getBallotObjectFromIpfs}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "ballotSpecHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "getDemocBallots",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getDemocBallots",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getDemocBallots}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"svNetwork\": *, \"democHash\": *}"
        ],
        "defaultRaw": {
          "svNetwork": null,
          "democHash": null
        },
        "defaultValue": "{\"svNetwork\":null,\"democHash\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "getContractAddresses",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getContractAddresses",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getContractAddresses}",
    "description": "Takes in the svNetwork object and returns all relevant addresses",
    "lineNumber": 119,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"svNetwork\": *}"
        ],
        "defaultRaw": {
          "svNetwork": null
        },
        "defaultValue": "{\"svNetwork\":null}"
      }
    ],
    "return": {
      "types": [
        "{\"indexAddress\": *, \"backendAddress\": *, \"auxAddress\": *, \"lookupAddress\": *, \"resolverAddress\": *, \"communityAuctionAddress\": *, \"delegationAddress\": *, \"paymentsAddress\": *}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "weiToCents",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~weiToCents",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{weiToCents}",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"payments\": *}"
        ],
        "defaultRaw": {
          "payments": null
        },
        "defaultValue": "{\"payments\":null}"
      },
      {
        "name": "wei",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "getCommunityBallotPrice",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getCommunityBallotPrice",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getCommunityBallotPrice}",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"payments\": *}"
        ],
        "defaultRaw": {
          "payments": null
        },
        "defaultValue": "{\"payments\":null}"
      },
      {
        "name": "democHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "checkIfAddressIsEditor",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~checkIfAddressIsEditor",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{checkIfAddressIsEditor}",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"svNetwork\": *}"
        ],
        "defaultRaw": {
          "svNetwork": null
        },
        "defaultValue": "{\"svNetwork\":null}"
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"userAddress\": *, \"democHash\": *}"
        ],
        "defaultRaw": {
          "userAddress": null,
          "democHash": null
        },
        "defaultValue": "{\"userAddress\":null,\"democHash\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "getCurrentGasPrice",
    "memberof": "src/light.ts",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/light.ts~getCurrentGasPrice",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{getCurrentGasPrice}",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"safeLow\": *, \"average\": *, \"fast\": *, \"fastest\": *}"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "checkBallotHashBSpec",
    "memberof": "src/light.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/light.ts~checkBallotHashBSpec",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{checkBallotHashBSpec}",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [
      {
        "name": "ballotSpec",
        "types": [
          "*"
        ]
      },
      {
        "name": "assertSpecHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "checkBallotHashGBallot",
    "memberof": "src/light.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/light.ts~checkBallotHashGBallot",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/light.ts",
    "importStyle": "{checkBallotHashGBallot}",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "ballotObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/types.ts",
    "content": "\n\n\nexport type ProxyVote = {\n    // these should be `bytes32` hexstrings\n    proxyReq: [string, string, string, string, string]\n    // this is a `bytes` hexstring\n    extra: string\n}\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/types.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/typings.d.ts",
    "content": "declare module '*.json' {\n  const value: any\n  export default value\n}\n\ndeclare module 'web3-utils'\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/typings.d.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/utils.ts",
    "content": "import * as R from 'ramda'\n\n/**\n * This will take an Ethereum hex string (or a normal hex string) and\n * output a normal hex string (no '0x' header) or throw an error on a\n * bad hex string.\n *\n * @param {string} hex\n *\n * @returns {string}\n *  the hex string.\n */\nexport const cleanEthHex = (hex: string) => {\n  if (hex === '0x0') {\n    return '00'\n  }\n\n  // hex must be even - only exception above\n  if (hex.length % 2 !== 0) {\n    throw Error(`Bad hex string: ${hex}`)\n  }\n\n  // this covers the case hex==\"0x\" => \"\"\n  if (hex.slice(0, 2) === '0x') {\n    return hex.slice(2)\n  }\n\n  return hex\n}\n\n/**\n * This compares ethereum addresses (taking into account case, etc)\n *\n * @param {string} addr1\n * @param {string} addr2\n *\n * @returns {bool}\n */\nexport const ethAddrEq = (addr1: string, addr2: string) => {\n  const _clean = a => module.exports.cleanEthHex(a).toLowerCase()\n  // throw a length check in there to ensure we have valid addresses\n  return _clean(addr1) === _clean(addr2) && addr1.length === 42\n}\n\n// this is from the bech32 spec (Bitcoin)\nconst B32_ALPHA = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\nconst toAlphabet = (arr: number[]) => {\n  var ret = ''\n  for (let i = 0; i < arr.length; i++) {\n    ret += B32_ALPHA.charAt(arr[i])\n  }\n  return ret\n}\n\n/**\n * This will convert a hex string to Base32 in the bech32 format WITHOUT a checksum.\n *\n * @param {string} hex\n *  The hex string to convert to Base32 - can be an EthHex or plain hex string.\n *\n * @returns {string}\n *  The Base32 version of the hex string.\n */\nexport const hexToBase32 = (hex: string) => {\n  const _hex = cleanEthHex(hex)\n\n  const buf = Buffer.from(_hex, 'hex')\n  const digits = [0]\n  let digitlength = 1\n\n  let carry\n  for (let i = 0; i < buf.length; ++i) {\n    carry = buf[i]\n    for (let j = 0; j < digitlength; ++j) {\n      carry += digits[j] * 256\n      digits[j] = carry % 32\n      carry = (carry / 32) | 0\n    }\n\n    while (carry > 0) {\n      digits[digitlength] = carry % 32\n      digitlength++\n      carry = (carry / 32) | 0\n    }\n  }\n\n  return toAlphabet(R.reverse(digits.slice(0, digitlength)))\n}\n",
    "static": true,
    "longname": "/Users/maxkaye/src/sv/lib/src/utils.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "cleanEthHex",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~cleanEthHex",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/utils.ts",
    "importStyle": "{cleanEthHex}",
    "description": "This will take an Ethereum hex string (or a normal hex string) and\noutput a normal hex string (no '0x' header) or throw an error on a\nbad hex string.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}\n the hex string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the hex string."
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "ethAddrEq",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~ethAddrEq",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/utils.ts",
    "importStyle": "{ethAddrEq}",
    "description": "This compares ethereum addresses (taking into account case, etc)",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addr1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "addr2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "B32_ALPHA",
    "memberof": "src/utils.ts",
    "static": true,
    "longname": "src/utils.ts~B32_ALPHA",
    "access": "public",
    "export": false,
    "importPath": "sv-lib/src/utils.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "toAlphabet",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~toAlphabet",
    "access": "public",
    "export": false,
    "importPath": "sv-lib/src/utils.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "hexToBase32",
    "memberof": "src/utils.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.ts~hexToBase32",
    "access": "public",
    "export": true,
    "importPath": "sv-lib/src/utils.ts",
    "importStyle": "{hexToBase32}",
    "description": "This will convert a hex string to Base32 in the bech32 format WITHOUT a checksum.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}\n The Base32 version of the hex string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "The hex string to convert to Base32 - can be an EthHex or plain hex string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The Base32 version of the hex string."
    }
  },
  {
    "kind": "index",
    "content": "# sv-lib\n\nLibrary for supporting SecureVote Light apps\n\n## Usage\n\n`const SV = require('sv-lib');`\n\n### `SV.utils`\n\n`cleanEthHex`\n\nTakes a string that should be hex, and removes the `0x` header if present.\n\n`hexToBase32`\n\nTakes a hex string and returns the base32 conversion using the alphabet from the `bech32` standard; though doesn't include a checksum.\nThis is used in serializing democracy hash prefixes.\n\n**Note: does not conform to bech32 standard**\n\n### `SV.ballotBox`\n\n`flags`\n\nAn object with keys corresponding to the names for various flags. All flags are a power of 2 (so can be combined via bitwise OR).\n\n`mkPacked`\n\nTakes startTime, endTime, and submissionBits (should all be JS ints) and packs them for the SV Light Ballot Box.\n\n`mkSubmissionBits`\n\nTakes an array of flags (see SV.ballotBox.flags) and returns the submission bits. Also throws errors on badly constructed flags.\n\n`mkSignedBallotForProxy`\n\nTakes `ballotId`, `sequence`, `voteData`, `extra`, `privateKey`, and `opts = {}` and returns `{proxyReq, extra}` in the format required for `BBFarm.submitProxyVote(proxyReq, extra)`.\n\nthe `opts` param is optional.\n\n`genRange3VoteData`\n\nTakes an array of votes in range `[-3,3]` and returns a `bytes32` eth hex string (suitable for using directly with web3 Contracts)\n\n### `SV.const`\n\nUtility Constants:\n\n* `zeroAddr` - address that's all zeros\n* `zeroHash` - a `bytes32` string that's all zeros\n",
    "longname": "/Users/maxkaye/src/sv/lib/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"sv-lib\",\n  \"version\": \"0.1.18\",\n  \"description\": \"SecureVote Light supporting functionality\",\n  \"main\": \"dist/index.umd.js\",\n  \"module\": \"dist/index.es5.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"homepage\": \"https://github.com/secure-vote/sv-lib#readme\",\n  \"files\": [\n    \"./dist\",\n    \"./docs\"\n  ],\n  \"author\": {\n    \"name\": \"Max Kaye\",\n    \"email\": \"max@secure.vote\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/secure-vote/sv-lib/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"@types/bn.js\": \"^4.11.1\",\n    \"@types/bs58\": \"^3.0.30\",\n    \"@types/ramda\": \"^0.25.35\",\n    \"assert\": \"^1.4.1\",\n    \"axios\": \"^0.18.0\",\n    \"bs58\": \"^4.0.1\",\n    \"colors\": \"^1.3.0\",\n    \"esdoc-typescript-plugin\": \"^1.0.1\",\n    \"eth-ens-namehash\": \"^2.0.8\",\n    \"eth-lib\": \"^0.2.8\",\n    \"ethereumjs-util\": \"^5.2.0\",\n    \"ramda\": \"^0.25.0\",\n    \"sha256\": \"^0.2.0\",\n    \"web3\": \"^1.0.0-beta.34\",\n    \"web3-eth-abi\": \"^1.0.0-beta.34\",\n    \"web3-eth-accounts\": \"^1.0.0-beta.34\",\n    \"web3-utils\": \"^1.0.0-beta.34\"\n  },\n  \"deprecated\": false,\n  \"keywords\": [\n    \"SecureVote\",\n    \"voting\",\n    \"crypto\",\n    \"blockchain\"\n  ],\n  \"license\": \"UNLICENSED\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/secure-vote/sv-lib.git\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^23.3.0\",\n    \"@types/node\": \"^10.0.3\",\n    \"commitizen\": \"^2.9.6\",\n    \"coveralls\": \"^3.0.0\",\n    \"cross-env\": \"^5.0.1\",\n    \"cz-conventional-changelog\": \"^2.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"husky\": \"^0.14.0\",\n    \"jest\": \"^23.4.1\",\n    \"lint-staged\": \"^7.1.3\",\n    \"lodash.camelcase\": \"^4.3.0\",\n    \"minami\": \"^1.2.3\",\n    \"prettier\": \"^1.13.4\",\n    \"prompt\": \"^1.0.0\",\n    \"replace-in-file\": \"^3.0.0-beta.2\",\n    \"rimraf\": \"^2.6.1\",\n    \"rollup\": \"^0.58.0\",\n    \"rollup-plugin-commonjs\": \"^9.1.3\",\n    \"rollup-plugin-json\": \"^3.0.0\",\n    \"rollup-plugin-node-builtins\": \"^2.1.2\",\n    \"rollup-plugin-node-resolve\": \"^3.3.0\",\n    \"rollup-plugin-sourcemaps\": \"^0.4.2\",\n    \"rollup-plugin-typescript2\": \"^0.15.1\",\n    \"semantic-release\": \"^15.0.0\",\n    \"ts-jest\": \"^23.0.1\",\n    \"ts-node\": \"^6.0.0\",\n    \"tslint\": \"^5.11.0\",\n    \"tslint-config-prettier\": \"^1.1.0\",\n    \"tslint-config-standard\": \"^7.0.0\",\n    \"typedoc\": \"^0.11.0\",\n    \"typescript\": \"^3.0.0-rc\",\n    \"validate-commit-msg\": \"^2.12.2\"\n  },\n  \"scripts\": {\n    \"dev\": \"tsc -w\",\n    \"docs\": \"esdoc\",\n    \"prepublish\": \"yarn build\",\n    \"lint\": \"tslint -t codeFrame 'src/**/*.ts' 'test/**/*.ts'\",\n    \"prebuild\": \"rimraf dist\",\n    \"build\": \"tsc --module commonjs && cp -a ./src/smart_contracts ./dist/smart_contracts && rollup -c rollup.config.ts && esdoc # typedoc --out docs --target es6 --theme minimal --mode file src\",\n    \"start\": \"rollup -c rollup.config.ts -w\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:prod\": \"npm run lint && npm run test -- --coverage --no-cache\",\n    \"report-coverage\": \"cat ./coverage/lcov.info | coveralls\",\n    \"commit\": \"echo 'commit' || git-cz\",\n    \"semantic-release\": \"semantic-release\",\n    \"semantic-release-prepare\": \"ts-node tools/semantic-release-prepare\",\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"{src,test}/**/*.ts\": [\n      \"prettier --write\",\n      \"git add\"\n    ]\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"node_modules/cz-conventional-changelog\"\n    },\n    \"validate-commit-msg\": {\n      \"types\": \"conventional-commit-types\",\n      \"helpMessage\": \"Use \\\"npm run commit\\\" instead, we use conventional-changelog format :) (https://github.com/commitizen/cz-cli)\"\n    }\n  },\n  \"jest\": {\n    \"transform\": {\n      \"^.+\\\\.tsx?$\": \"ts-jest\"\n    },\n    \"testRegex\": \"(/__tests__/.*|\\\\.(test|spec))\\\\.(ts|tsx|js)$\",\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\",\n      \"jsx\",\n      \"json\",\n      \"node\"\n    ],\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 90,\n        \"functions\": 95,\n        \"lines\": 95,\n        \"statements\": 95\n      }\n    },\n    \"collectCoverage\": true,\n    \"testPathIgnorePatterns\": [\n      \"/node_modules/\",\n      \"/dist\"\n    ]\n  },\n  \"prettier\": {\n    \"semi\": false,\n    \"singleQuote\": true\n  }\n}\n",
    "longname": "/Users/maxkaye/src/sv/lib/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]