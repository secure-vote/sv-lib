import { ProxyVote } from './types';
/**
 * This object tracks the flags used for SV ballot boxes. They determine the submission
 * methods and whether ballots are tracked as binding, official, or testing.
 *
 * For more info see docs.secure.vote
 */
export declare const flags: {
    USE_ETH: number;
    USE_SIGNED: number;
    USE_NO_ENC: number;
    USE_ENC: number;
    IS_BINDING: number;
    IS_OFFICIAL: number;
    USE_TESTING: number;
};
/**
 * Creates a packed copy of start and end times with submissionBits
 *
 * @param {number} start
 *  Start time in seconds since epoch
 * @param {number} end
 *  End time in seconds since epoch
 * @param {number} submissionBits
 *  Submission bits - can be created using mkSubmissionBits
 * @returns {BN}
 *  Returns a `bn.js` BigNum of the packed values.
 *  Format: [submissionBits(16)][startTime(64)][endTime(64)]
 */
export declare const mkPacked: (start: any, end: any, submissionBits: any) => any;
/**
 * This combines flags into a finished submissionBits. It also does some validation.
 * @param {number[]} toCombine
 *  Array of all submission flags to combine. See SV.ballotBox.flags for flag options.
 *  All flags must be a power of 2 (which indicates they occupy a single bit in the number when combining).
 * @returns {number}
 *  A 16 bit integer of combined flags.
 */
export declare const mkSubmissionBits: (...toCombine: any[]) => number;
/**
 * Take the arguments and produce web3 data fitting the `submitProxyVote` method.
 * @param {string} ballotId
 *  a BN.js or Hex ballotId
 * @param {number} sequence
 *  the sequence number to use (0 < sequence < 2^32)
 * @param {string} voteData
 *  the vote data to use, should be 32 bytes hex encoded
 * @param {string} extra
 *  any extra data included with the vote (such as curve25519 pubkeys)
 * @param {string} privateKey
 *  the privkey used to sign
 * @param {object?} opts
 *  options:
 *   - skipSequenceSizeCheck: boolean (will not throw if sequence is >= 2^32)
 * @returns {object}
 *  { proxyReq (bytes32[5]), extra (bytes) } in the required format for `submitProxyVote`
 */
export declare const mkSignedBallotForProxy: (ballotId: any, sequence: any, voteData: any, extra: any, privateKey: any, opts?: any) => ProxyVote;
/**
 * Verify a signed vote to be submitted via proxy as generated by `mkSignedBallotForProxy`
 *
 * @param {ProxyVote} proxyVote The ProxyVote object
 * @param {*} [opts={}] Not used currently; for future options
 * @returns {{verified: bool, address: EthAddress}}
 */
export declare const verifySignedBallotForProxy: (proxyVote: ProxyVote, opts?: any) => {
    verified: boolean;
    address: any;
};
/**
 * Prepares voteData for a Range3 ballot from an array of votes
 *
 * @param {array} votesArray
 *  Takes an array of numbers which represent the votes to be transformed
 *  Format: [1, 2, -1]
 *
 * @returns {string}
 *  Returns an eth hex string of the vote data
 */
export declare const genRange3VoteData: (votesArray: number[]) => any;
/**
 * Prepares a transaction for sending with the users web3 browser
 *
 * @param {object} txInfo
 *  Object literal containing the information required to generate the web3 transaction.
 *       @param {string} bbFarm
 *       Ethereum address where the vote needs to be cast
 *       @param {string} ballotId
 *       The id of the ballot
 *       @param {string} userAddress
 *       Ethereum address of the user - 'from'
 *       @param {string} voteData
 *       The data containing the users vote
 *
 * @returns {object}
 *  Returns an object with all fields required to cast the transaction
 */
export declare const prepareWeb3BBVoteTx: ({ txInfo }: {
    txInfo: any;
}, { svNetwork }: {
    svNetwork: any;
}) => Promise<{
    to: any;
    data: any;
    gas: any;
    gasPrice: number;
    from: any;
}>;
export declare const castProxyVote: (request: any, svConfig: any) => Promise<{}>;
